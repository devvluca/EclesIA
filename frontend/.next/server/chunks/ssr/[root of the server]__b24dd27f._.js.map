{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lucan/Documents/GitHub/EclesIA/frontend/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  promptDir: './prompts',\r\n  plugins: [\r\n    googleAI({\r\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\r\n    }),\r\n  ],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lucan/Documents/GitHub/EclesIA/frontend/src/ai/flows/answer-theological-questions.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview This file defines a Genkit flow for answering theological questions about the Igreja Episcopal Carismática do Brasil and Anglican tradition.\r\n *\r\n * - answerTheologicalQuestions - A function that takes a question as input and returns an answer from the AI.\r\n * - AnswerTheologicalQuestionsInput - The input type for the answerTheologicalQuestions function.\r\n * - AnswerTheologicalQuestionsOutput - The return type for the answerTheologicalQuestions function.\r\n */\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {z} from 'genkit';\r\n\r\nconst AnswerTheologicalQuestionsInputSchema = z.object({\r\n  question: z.string().describe('The theological question to answer.'),\r\n});\r\nexport type AnswerTheologicalQuestionsInput = z.infer<\r\n  typeof AnswerTheologicalQuestionsInputSchema\r\n>;\r\n\r\nconst AnswerTheologicalQuestionsOutputSchema = z.object({\r\n  answer: z.string().describe('The AI-generated answer to the question.'),\r\n});\r\nexport type AnswerTheologicalQuestionsOutput = z.infer<\r\n  typeof AnswerTheologicalQuestionsOutputSchema\r\n>;\r\n\r\nexport async function answerTheologicalQuestions(\r\n  input: AnswerTheologicalQuestionsInput\r\n): Promise<AnswerTheologicalQuestionsOutput> {\r\n  return answerTheologicalQuestionsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'answerTheologicalQuestionsPrompt',\r\n  input: {\r\n    schema: z.object({\r\n      question: z.string().describe('The theological question to answer.'),\r\n    }),\r\n  },\r\n  output: {\r\n    schema: z.object({\r\n      answer: z.string().describe('The AI-generated answer to the question.'),\r\n    }),\r\n  },\r\n  prompt: `You are a knowledgeable AI assistant specialized in the Igreja Episcopal Carismática do Brasil.\r\n\r\n  Please answer the following question to the best of your ability, drawing upon your knowledge of theological content related to the Igreja Episcopal Carismática do Brasil. Only refer to the Anglican tradition if the question specifically asks about it.\r\n\r\n  Question: {{{question}}}`,\r\n});\r\n\r\nconst answerTheologicalQuestionsFlow = ai.defineFlow<\r\n  typeof AnswerTheologicalQuestionsInputSchema,\r\n  typeof AnswerTheologicalQuestionsOutputSchema\r\n>(\r\n  {\r\n    name: 'answerTheologicalQuestionsFlow',\r\n    inputSchema: AnswerTheologicalQuestionsInputSchema,\r\n    outputSchema: AnswerTheologicalQuestionsOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAKA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAKO,eAAe,uCAAwB,GAAxB,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B;IACF;IACA,QAAQ,CAAC;;;;0BAIe,CAAC;AAC3B;AAEA,MAAM,iCAAiC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIlD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IArCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lucan/Documents/GitHub/EclesIA/frontend/src/app/chat/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/chat/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/chat/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lucan/Documents/GitHub/EclesIA/frontend/src/app/chat/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/chat/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/chat/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}